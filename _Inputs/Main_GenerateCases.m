%% Documentation
% Generate Input files for OpenFAST based on a CSV file
% Turbulence and waves can be generated by this script

%% Initialization
restoredefaultpath;
clear all; close all; clc
addpath('..\_Functions\')

%% User Parameters
case_file   = '_inputs\CasesExtended.csv';
outputdir   = '.\';
bOffshore= logical(1) ;
% Parameters for turbulence generation
turbsim              = 'TurbSim_x64.exe'             ;
bForceTurbGeneration = logical(0)                    ;
% Parameters for wave generation
HydroDyn            = 'HydroDynDriver_x64.exe'               ;
bForceWaveGeneration= logical(0)                             ;


%% Readonly and Derived parameters for case generation
bSimulink   = 1;
ref_turb_file       = '_inputs\Template_TurbSim.dat'         ;
nssfile             = '_inputs\NSS.csv'                      ;
ref_driver_filename = '_inputs\Template_HydroDyn_Drv_Inp.dvr';
ref_hydro_filename  = '_inputs\Template_HydroDyn_Drv_Inp.dat';
oper_file           = '_inputs\TurbinePerformances.csv'
templateDir  = '_TemplateSimulation\';  % NOTE: use backspace
fast_exe     = 'OpenFAST2_x64s_ebra.exe';
if bOffshore;   sSubCase = '_Offshore';        else sSubCase = '_Onshore'; end
if bSimulink;   sNotSimulink = ''; else sNotSimulink = '_NOTSIMULINK'; end

GUST_FILES = {'Wind/ECD+R+2.0.wnd'
              'Wind/EOGR+2.0.wnd'
              'Wind/EWSV+13.4.wnd'
              'Wind/StepWindAboveRated_-2mps.wnd'};

fast_file_ref = [templateDir '_TemplateOpenFAST2' sSubCase '.fst'];
elas_file_ref = [templateDir '_Template_ED' sSubCase '.dat'];
serv_file_ref = [templateDir '_Template_SD' sSubCase sNotSimulink '.dat'];
hydr_file_ref = [templateDir '_Template_HD.dat' ];
wind_file_ref = [templateDir '_Template_IW.dat'  ];
%aero_file_ref = [templateDir '_Template_AD15.03.dat'];

aero_file_pitch = 'TestCase_AD15.05_Pitch.dat'     ;
aero_file_dirty = 'TestCase_AD15.05_Dirty.dat'     ;
bld_file_p1     = 'TestCase_AD15_blade_p1Pitch.dat';
bld_file_m1     = 'TestCase_AD15_blade_m1Pitch.dat';
% 
outdir = [outputdir 'LoadCases' sSubCase sNotSimulink '/'];
outdir = strrep(outdir,'/','\'); % for windows commands
if ~exist(outdir,'dir'); mkdir(outdir); end

%% Reading cases 
Cases= fReadCases(case_file)  ;

% --------------------------------------------------------------------------------}
%% --- Generating Turb files
% --------------------------------------------------------------------------------{
disp('--- Generating turb files')
TurbOutDir = [outdir 'Turb\'];
fGenerateTurbCases(case_file, ref_turb_file, TurbOutDir, turbsim, bForceTurbGeneration, true);

% --------------------------------------------------------------------------------}
%% --- Generating Wave files
% --------------------------------------------------------------------------------{
if bOffshore
    disp('--- Generating wave files')
    WaveOutDir = [outdir 'Waves\'];
    if ~exist(WaveOutDir,'dir'); mkdir(WaveOutDir); end;
    if ~exist([WaveOutDir 'HydroData'],'dir'); mkdir([WaveOutDir 'HydroData']); end;
    copyfile([templateDir 'HydroData\*'], [WaveOutDir 'HydroData']);
    fGenerateWaveCases(case_file,ref_driver_filename, ref_hydro_filename, nssfile, HydroDyn, WaveOutDir, bForceWaveGeneration, true);
end






% --------------------------------------------------------------------------------}
%% --- Generating FAST input files 
% --------------------------------------------------------------------------------{
%% Reading Operating conditions
Oper = dlmread(oper_file,'',1,0);
fid= fopen(oper_file,'r');
data = textscan(fid,'%s',1,'delimiter', '\n');
fclose(fid); 
ColNames = strsplit(data{1}{1});
iWS        = find(cellfun(@(x)~isempty(x),strfind(ColNames,'WS')),1)       ;
iRPM       = find(cellfun(@(x)~isempty(x),strfind(ColNames,'RotSpeed')),1) ;
iPitch     = find(cellfun(@(x)~isempty(x),strfind(ColNames,'BldPitch')),1) ;
iPtfmSurge = find(cellfun(@(x)~isempty(x),strfind(ColNames,'PtfmSurge')),1);
iPtfmPitch = find(cellfun(@(x)~isempty(x),strfind(ColNames,'PtfmPitch')),1);
vWS = Oper(:,iWS);

%% Reading templates 
fast_ref = fFAST2MATLAB(fast_file_ref);
hydr_ref = fFAST2MATLAB(hydr_file_ref);
wind_ref = fFAST2MATLAB(wind_file_ref);
elas_ref = fFAST2MATLAB(elas_file_ref);
serv_ref = fFAST2MATLAB(serv_file_ref);
%aero_ref = fFAST2MATLAB(aero_file_ref);

%% Cleaning up output directory if it already exists
system(sprintf('del /F /Q   %s*.dat  2>nul',outdir));
system(sprintf('del /F /Q   %s*.fst  2>nul',outdir));
system(sprintf('rmdir /s /Q %sAirfoils_AD14     2>nul',outdir));
system(sprintf('rmdir /s /Q %sAirfoils_AD15     2>nul',outdir));
system(sprintf('rmdir /s /Q %sHydroData    2>nul',outdir));
system(sprintf('rmdir /s /Q %sServoData    2>nul',outdir));
system(sprintf('rmdir /s /Q %sWind         2>nul',outdir));
% return

%% Copying all template file to simulation dir
disp('--- Copying template files')
F = dir([templateDir '*']);
for i = 1:length(F)
    if length(F(i).name)<=2
        continue
    end
    [~,~,ext] = fileparts(F(i).name);
    bCopy=true;
    if strfind(F(i).name,'_TEMP')>0
        bCopy=false;
    elseif strfind(F(i).name,'_Template')>0
        bCopy=false;
    elseif (length(ext)>0) && (isequal(ext,'.sum') || isequal(ext,'.out') || isequal(ext,'.outb'))
        bCopy=false;
    elseif (length(ext)>0) && (isequal(ext,'.dll') || isequal(ext,'.exe'))
        bCopy=~bSimulink;
    elseif strfind(F(i).name,'HydroData')>0
        bCopy=bOffshore;
    elseif strfind(F(i).name,'ServoData')>0
        bCopy=~bSimulink;
    end
    if bCopy
        disp([templateDir F(i).name])
        if F(i).isdir
            mkdir([outdir F(i).name]);
            copyfile([templateDir F(i).name '\*'], [outdir F(i).name]);
        else
            copyfile([templateDir F(i).name], outdir);
        end
    end
end

%% Creating inputs for all cases
disp('--- Creating input files')
% Cases=Cases(end,:);
sCmds = cell(1,length(Cases.WS));
for ic = 1:length(Cases.WS)
    DLC    = Cases.DLC(ic);
    WS     = Cases.WS(ic);
    Yaw    = Cases.Yaw(ic);
    WiSeed = Cases.WiSeed(ic);
    WaSeed = Cases.WaSeed(ic);
    bPitch = Cases.bPitch(ic);
    iGust  = Cases.iGust(ic);
    bDirty = Cases.bDirty(ic);
    tSim   = Cases.tSim(ic);
    % --- Simulation name and environmental file names
    basename = Cases.Names{ic};
    wavefilename = sprintf('Waves\\wave_ws%02.0f_r%d',round(WS),WaSeed);
    if iGust>0
        windfilename = GUST_FILES{iGust};
    else
        windfilename = sprintf('Turb\\wind_ws%02.0f_s%d.bts' ,round(WS),WiSeed);
    end
    disp(basename)

    hydr_file = [basename '_HD.dat'   ];
    wind_file = [basename '_IW.dat' ];
    elas_file = [basename '_ED.dat' ];
    serv_file = [basename '_SD.dat' ];
    %aero_file = [basename '_AD.dat' ];

    % --- Fast file
    fast = fast_ref;
    fast = fChangeVal(fast, 'EDFile'    , ['"' elas_file '"']) ;
    fast = fChangeVal(fast, 'InflowFile', ['"' wind_file '"']) ;
    fast = fChangeVal(fast, 'ServoFile' , ['"' serv_file '"']) ;
    if bOffshore
        fast = fChangeVal(fast, 'HydroFile' , ['"' hydr_file '"']) ;
    else
        fast = fChangeVal(fast, 'HydroFile' , '"NaN"') ;
    end
    if bPitch
        fast = fChangeVal(fast, 'AeroFile'  , ['"' aero_file_pitch '"']) ;
    elseif bDirty
        fast = fChangeVal(fast, 'AeroFile'  , ['"' aero_file_dirty '"']) ;
    end
    fast = fChangeVal(fast, 'TMax' , tSim);

    % --- ElastoDyn file
    elas = elas_ref;
    elas = fChangeVal(elas, 'NacYaw', Yaw );
    elas = fChangeVal(elas, 'RotSpeed'    , interp1(vWS,Oper(:,iRPM), WS));
    elas = fChangeVal(elas, 'BlPitch(1)' , interp1(vWS,Oper(:,iPitch), WS));
    elas = fChangeVal(elas, 'BlPitch(2)' , interp1(vWS,Oper(:,iPitch), WS));
    elas = fChangeVal(elas, 'BlPitch(3)' , interp1(vWS,Oper(:,iPitch), WS));
    if bOffshore
        elas = fChangeVal(elas, 'PtfmSurge'  , interp1(vWS,Oper(:,iPtfmSurge), WS));
        elas = fChangeVal(elas, 'PtfmPitch'  , interp1(vWS,Oper(:,iPtfmPitch), WS));
    end

    % --- Aero file
    %aero = aero_ref;
    %if bPitch
    %    aero = fChangeVal(aero, 'ADBlFile(1)', ['"' bld_file_p1 '"']);
    %    aero = fChangeVal(aero, 'ADBlFile(3)', ['"' bld_file_m1 '"']);
    %end
    % --- Inflow file
    wind = wind_ref;
    wind = fChangeVal(wind, 'HWindSpeed', WS); % USELESS I believe
    wind = fChangeVal(wind, 'Filename', ['"' windfilename '"'],true);
    if WiSeed<=0 % No turbulence - Deterministic wind
        wind = fChangeVal(wind, 'WindType', 2); 
    else
        % turbulence
        wind = fChangeVal(wind, 'WindType', 3);
    end
    if ~exist([outdir windfilename],'file')
        error('Windfile not found %s',[outdir windfilename])
    end

    % --- Waves file
    if bOffshore
        hydr = hydr_ref;
        if WaSeed>0
            hydr = fChangeVal(hydr, 'WaveMod'  , 5);
            hydr = fChangeVal(hydr, 'WvKinFile', ['"' wavefilename '"']);
            fullname=[outdir wavefilename '.Elev'];
            if ~exist(fullname,'file')
                error('Wavefile not found %s',fullname)
            end
        end
        if tSim<=600
            hydr = fChangeVal(hydr, 'WaveTMax' , 600);
        else
            hydr = fChangeVal(hydr, 'WaveTMax' , tSim);
        end
    end

    % --- Servo file
    serv = serv_ref;
    serv = fChangeVal(serv, 'YawNeut', Yaw );

    % --- Writing to disk
    fMATLAB2FAST(fast, [outdir basename '.fst']);
    fMATLAB2FAST(elas, [outdir elas_file]);
    fMATLAB2FAST(wind, [outdir wind_file]);
    fMATLAB2FAST(serv, [outdir serv_file]);
    if bOffshore
        fMATLAB2FAST(hydr, [outdir hydr_file]);
    end
    sCmds{ic} = sprintf('if not exist %s %s %s',[basename '.outb'],fast_exe,[basename '.fst']);
end


%% OpenFast batch file
if ~bSimulink
    batchfile=strrep([outdir  '_RUN_All.bat'],'/','\');
    fid=fopen(batchfile,'w');
    fprintf(fid,'%s\n',sCmds{:});
    fprintf(fid,'pause\n')
    fclose(fid);
    %system(sprintf('start "cd %s && _RUN_All.bat"',outdir))
    system(sprintf('start cmd /k "cd %s && _RUN_All.bat"',outdir))
end

