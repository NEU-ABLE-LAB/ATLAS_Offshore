%% baselineAnalysis

%% Load the baseline results
% These are generated by `MainParsimRun.m` and saving `simOut`
load _BaselineResults/baselineResults

nCases = length(simOut); % Number of simulation cases

% Emulate the `folders` variable in `Main.m` that used in legends
folders = {'', 'Baseline Results'};

%% Show the importance of each component to total cost

caseN = 1; % This plot will be the same of all cases

fCostFunctionPlot (simOut(caseN).CF, simOut(caseN).CF_Comp, ...
    simOut(caseN).CF_Vars, {simOut(caseN).CF_Freq}, ...
    simOut(caseN).pMetrics, folders, 'absFreq');

%% Determine correlation between signals

for caseN = 1%:nCases

    % Some channels do not contain valid data
    [~,validChans] = setxor(simOut(caseN).ChanName,{...
        'TwstDefl1', 'TwstDefl2', 'TwstDefl3', ...
        'TTDspTwst', 'B1N3Clrnc'});
    validChans = sort(validChans);
    
    % Normalize each column, preserving sign
    % ref: https://www.mathworks.com/matlabcentral/answers/372602-normalizing-columns-does-my-function-do-the-same-as-normc#answer_295940
    normc_fcn = @(m) sqrt(m.^2 ./ sum(m.^2)) .* sign(m);
    normChans = normc_fcn(simOut(caseN).Channels(:,validChans));
    
    % Calculate the correlation matrix
    R = corrcoef(normChans);
    
    
    % Calculate the PCA
    [coef,~,latent] = pca(normChans);
    
    figure('windowstyle','docked');
    heatmap(...
        [num2str(validChans) ...
            repmat('-',length(validChans),1) ...
            num2str(latent,'%0.1E')], ...
        simOut(caseN).ChanName(validChans), ...
        coef)
end